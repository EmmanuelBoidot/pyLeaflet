{"name":"Pyleaflet","tagline":"mpld3 extension for plotting data on a Leaflet map","body":"# pyLeaflet\r\nmpld3 extension for plotting data on a Leaflet map\r\n\r\nAbout\r\n-----\r\npyLeaflet it an extension of mpld3 that provides geolocalized data visualization on a Leaflet layer as an overlay pane.\r\n\r\n\r\nInstallation\r\n------------\r\npyLeaflet is compatible with python 2.6-2.7 (python 3 not tested). It requires\r\n[mpld3](http://mpld3.github.io),\r\n[matplotlib](http://matplotlib.org) version 1.3 and\r\n[jinja2](http://jinja.pocoo.org/) version 2.7+.\r\n\r\nTo install:\r\n- clone project\r\n- within the git source directory, run\r\n\r\n     [~]$ python setup.py install\r\n\r\nDescription\r\n----------\r\nThe idea behind this module is to allow you to plot the same figures you would plot using mpld3. The first subplot of the figure should only contain (lon,lat) coordinates. It will be displayed on a Leaflet map. The other axes will be rendered by mpld3 as they would have been if you were using mpld3 alone.\r\n\r\nExample Plot\r\n----------\r\nAn example script is provided in this project: see ``example.py''. In order to plot geodata using pyLeaflet, proceed as for MatPlotLib, using the longitude as the first coordinate and the latitude as the second coordinate. The code is displayed below.\r\n\r\n```python\r\n#!/usr/bin/python\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib.path as mpath\r\nimport matplotlib.patches as mpatches\r\nimport numpy as np\r\nimport pyLeaflet\r\n\r\nN=200\r\n\r\nPath = mpath.Path\r\npath_data = [\r\n    (Path.MOVETO, (1.58-85, 35-2.57)),\r\n    (Path.CURVE4, (0.35-85, 35-1.1)),\r\n    (Path.CURVE4, (-1.85-85, 35+2.0)),\r\n    (Path.CURVE4, (0.385-85, 35+2.0)),\r\n    (Path.LINETO, (0.85-85, 35+1.15)),\r\n    (Path.CURVE4, (2.2-85, 35+3.2)),\r\n    (Path.CURVE4, (3-85, 35+0.05)),\r\n    (Path.CURVE4, (2.0-85, 35-0.5)),\r\n    (Path.CLOSEPOLY, (1.58-85, 35-2.57)),\r\n    ]\r\ncodes, verts = zip(*path_data)\r\npath = mpath.Path(verts, codes)\r\npatch = mpatches.PathPatch(path, facecolor='r', alpha=0.5)\r\n\r\n# plot control points and connecting lines\r\nx, y = zip(*path.vertices[:-1])\r\nx2 = 2.5 * np.random.randn(N) -84\r\ny2 = 2.0 * np.random.randn(N) +32\r\n\r\nt = np.linspace(1,100,len(x))\r\nt2 = np.linspace(1,100,len(x2))\r\n\r\nfig, (ax1,ax2,ax3) = plt.subplots(figsize=(18, 18),nrows=3,ncols=1)\r\n\r\nax1.add_patch(patch)\r\npoints = ax1.plot(x, y, 'bo', ms=5)\r\nline = ax1.plot(x, y, '-k')\r\nline2 = ax1.plot(x2, y2, 'ro', ms=5)\r\nax1.plot(x2, y2, '--g', ms=10)\r\nax1.axis('equal')\r\nax1.set_xlabel('longitude')\r\nax1.set_ylabel('latitude')\r\n\r\nax2.plot(t,x,'-k')\r\nax2.plot(t2,x2,'--g')\r\nax2.set_xlabel('t')\r\nax2.set_ylabel('x')\r\nax2.legend(['x','x2'])\r\n\r\nax3.plot(t,y,'-k')\r\nax3.plot(t2,y2,'--g')\r\nax3.set_xlabel('t')\r\nax3.set_ylabel('y')\r\nax3.legend(['y','y2'])\r\n\r\n\r\n\r\n\r\n###############\r\n###############\r\n# tile_layer = \"http://{s}.tile.stamen.com/toner/{z}/{x}/{y}.jpg\"\r\ntile_layer = \"http://{s}.tile.stamen.com/terrain/{z}/{x}/{y}.jpg\"\r\nhtml = pyLeaflet.plotWithMap(fig,tile_layer = tile_layer)\r\n\r\n\r\nfout = open('index.html','w')\r\nfout.write(html)\r\nfout.close()\r\n```\r\n\r\n{% include example.html %}","google":"UA-53841221-4","note":"Don't delete this file! It's used internally to help with page regeneration."}